package mysql;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/access") // This means URL's start with /demo (after Application path)
public class MainController {
    private static SessionFactory factory;
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final StudentRepository studentRepository;
    private final CourseRepository courseRepository;

    @Autowired
    public MainController(StudentRepository studentRepository, CourseRepository courseRepository) {
        this.studentRepository = studentRepository;
        this.courseRepository = courseRepository;
        factory = new Configuration().configure().buildSessionFactory();
    }

    @GetMapping(path = "/addRecord") // Map ONLY GET Requests
    public @ResponseBody
    boolean addNewStudent(@RequestParam String first_name,
                          @RequestParam String last_name,
                          @RequestParam String email,
                          @RequestParam String course_ID,
                          @RequestParam String Student_ID,
                          @RequestParam String Android_ID,
                          @RequestParam String IMEI,
                          @RequestParam String course_name,
                          @RequestParam String start_hour,
                          @RequestParam String start_min,
                          @RequestParam String end_hour,
                          @RequestParam String end_min,
                          @RequestParam String course_day) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Session session = factory.openSession();
        if (first_name.length() == 0) {
            throw new IllegalArgumentException("The 'first_name' parameter must not be null or empty");
        }
        Student_table n = new Student_table();
        Course_table c = new Course_table();
        c.setCourse_ID(course_ID);
        c.setCourse_name(course_name);
        c.setDay(course_day);
        c.setStart_time(Time.valueOf(start_hour + ":" + start_min + ":" + "00"));
        c.setEnd_time(Time.valueOf(end_hour + ":" + end_min + ":" + "00"));
        n.setAndroid_ID(Android_ID);
        n.setStudent_ID(Student_ID);
        n.setIMEI(IMEI);
        n.setFirst_name(first_name);
        n.setLast_name(last_name);
        n.setEmail(email);
        n.setCourse(c);
        String hql = "FROM Student_table where IMEI = :IMEI";
        Query query = session.createQuery(hql);
        query.setParameter("IMEI", IMEI);
        List l = query.list();

        if(l.size()!=0){
            Student_table student = (Student_table) l.get(0);
            student.setStudent_ID(Student_ID);
            student.setEmail(email);
            student.setFirst_name(first_name);
            student.setLast_name(last_name);
            student.setAndroid_ID(Android_ID);
            student.setCourse(c);
            session.update(student);
        }
        else {session.save(n);}
        session.flush();
        session.close();
        //session.saveOrUpdate(n);
        //studentRepository.save(n);
        return true;
    }


    @ExceptionHandler(IllegalArgumentException.class)
    void handleIllegalArgumentException(HttpServletResponse response) throws IOException {
        response.sendError(HttpStatus.BAD_REQUEST.value());
    }

    @GetMapping(path = "/allStudents")
    public @ResponseBody
    Iterable<Student_table> getAllStudents() {
        // This returns a JSON or XML with the users
        return studentRepository.findAll();
    }

    @GetMapping(path = "/allCourses")
    public @ResponseBody
    Iterable<Course_table> getAllCourses() {
        // This returns a JSON or XML with the users
        return courseRepository.findAll();
    }

    @GetMapping(path = "/studentCourses")
    public @ResponseBody
    Course_table[] getStudentCourses(@RequestParam String IMEI) {

        Session session = factory.openSession();
        /*Student_table student_table = (Student_table) session.get(Student_table.class, Student_ID) ;
        session.flush();
        session.close();
        */
        String hql = "FROM Course_table where ID in (select course.id FROM Student_table where IMEI = :IMEI)";
        Query query = session.createQuery(hql);
        query.setParameter("IMEI", IMEI);
        List l = query.list();
        Course_table[] c = new Course_table[l.size()];
        for(int i=0;i<l.size();i++)
            c[i]=(Course_table)l.get(i);
        return c;
    }
    @GetMapping(path = "/studentDetails")
    public @ResponseBody
    Student_table getStudentDetails(@RequestParam String IMEI) {

        Session session = factory.openSession();
        /*Student_table student_table = (Student_table) session.get(Student_table.class, Student_ID) ;
        session.flush();
        session.close();
        */
        String hql = "FROM Student_table where IMEI = :IMEI";
        Query query = session.createQuery(hql);
        query.setParameter("IMEI", IMEI);
        List l = query.list();
        Student_table[] c = new Student_table[l.size()];
        for(int i=0;i<l.size();i++)
            c[i]=(Student_table) l.get(i);
        return c[0];
    }
    //ToDo:location
    @GetMapping(path = "/ping")
    public @ResponseBody
    boolean sendPing(@RequestParam String student_ID,
                     @RequestParam String IMEI,
                     @RequestParam String android_ID,
                     @RequestParam String course_ID,
                     @RequestParam String email_id) {
        Session session = factory.openSession();
        String hql = "FROM Course_table where ID in (select course.id FROM Student_table where IMEI = :IMEI AND" +
                " Student_ID = :student_ID AND email = :email_id AND Android_ID = :android_ID)";
        Query query = session.createQuery(hql);
        query.setParameter("IMEI", IMEI);
        query.setParameter("student_ID", student_ID);
        query.setParameter("email_id", email_id);
        query.setParameter("android_ID", android_ID);
        ArrayList<Course_table> l =  (ArrayList) query.list();
        if (l.size() == 0) {
            return false;
        }
        Course_table course = l.get(0);
        if(course.getCourse_ID().equalsIgnoreCase(course_ID)) {
            Date sDate = new Date();
            sDate.setHours(course.getStart_time().getHours());
            sDate.setMinutes(course.getStart_time().getMinutes());
            Date eDate = new Date();
            eDate.setHours(course.getEnd_time().getHours());
            eDate.setMinutes(course.getEnd_time().getMinutes());
            if(isNowBetweenDateTime(sDate,eDate,getDay(course.getDay()))) {
                return true;
            }
        }
        return false;
    }

    @GetMapping(path = "/newPing")
    public @ResponseBody
    Course_table sendNewPing(@RequestParam String IMEI) {
        Session session = factory.openSession();
        String hql = "FROM Course_table where ID in (select course.id FROM Student_table where IMEI = :IMEI)";
        Query query = session.createQuery(hql);
        query.setParameter("IMEI", IMEI);
        ArrayList<Course_table> l =  (ArrayList) query.list();
        if (l.size() == 0) {
            return new Course_table();
        }
        Course_table course = l.get(0);
        //if(course.getCourse_ID().equalsIgnoreCase(course_ID)) {
            Date sDate = new Date();
            sDate.setHours(course.getStart_time().getHours());
            sDate.setMinutes(course.getStart_time().getMinutes());
            Date eDate = new Date();
            eDate.setHours(course.getEnd_time().getHours());
            eDate.setMinutes(course.getEnd_time().getMinutes());
            if(isNowBetweenDateTime(sDate,eDate,getDay(course.getDay()))) {
                return (Course_table)l.get(0);
            }
        //}
        return new Course_table();
    }

    private boolean isNowBetweenDateTime(final Date s, final Date e, final int day)
    {
        final Date now = new Date();
        return now.after(s) && now.before(e) && (day == Calendar.getInstance().get(Calendar.DAY_OF_WEEK));
    }
    private static int getDay(String day) {
        switch (day.toLowerCase()) {
            case "sunday": {
                return Calendar.SUNDAY;
            }
            case "monday": {
                return Calendar.MONDAY;
            }
            case "tuesday": {
                return Calendar.TUESDAY;
            }
            case "wednesday": {
                return Calendar.WEDNESDAY;
            }
            case "thursday": {
                return Calendar.THURSDAY;
            }
            case "friday": {
                return Calendar.FRIDAY;
            }
            case "saturday": {
                return Calendar.SATURDAY;
            }
            default: {
                return Calendar.MONDAY;
            }
        }
    }

    }